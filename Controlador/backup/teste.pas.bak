unit teste;

{$mode objfpc}{$H+}

interface

uses
  Classes, SysUtils, FileUtil, LResources, Forms, Controls, Graphics, Dialogs,
  StdCtrls, ExtCtrls, lNetComponents, lNet;

type

  MaxRobots=6;

  { TFTeste }

   TRobotState=record
    x,y,teta: double;
    M1,M2,M3: double;
    num: integer;
  end;

  TFTeste = class(TForm)
    BCommand: TButton;
    BCommand1: TButton;
    Edit1: TEdit;
    Edit2: TEdit;
    Edit3: TEdit;
    Edit4: TEdit;
    Label1: TLabel;
    Label2: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    UDPTest: TLUDPComponent;
    Memo1: TMemo;
    Timer1: TTimer;
    procedure UDPTestonReceive(aSocket: TLSocket);
  private
    { private declarations }
  public
    { public declarations }
    procedure ProcessUDPMsg(Data: string);
  end; 

var
  FTeste: TFTeste;

  RobotState: array[0..MaxRobots-1] of TRobotState;
  myNumber: integer;


implementation

{ TFTeste }

procedure TFTeste.UDPTestonReceive(aSocket: TLSocket);
  var
  msg: string;
begin
  //Message received
  UDPTest.GetMessage(msg);
  ProcessUDPMsg(msg);
  SimTwoMainLoop;
end;

procedure TFTeste.ProcessUDPMsg(Data: string);
var
  gData: TStringList;
  i:integer;
begin
  Randomize;
  gData:=TStringList.Create;
  gData.Text:=Data;

  //Here starts the Protocol
  //Protocol: RobotNumber + XRobot + YRobot + TetaRobot + Motor1Robot +
  //          Motor2Robot + Motor3Robot.
  myNumber:=StrToIntDef(gData[0], 0);
  RobotState[myNumber].x:=strtofloatDef(gData[1], 0);
  RobotState[myNumber].y:=strtofloatDef(gData[2], 0);
  RobotState[myNumber].teta:=strtofloatDef(gData[3], 0);
  RobotState[myNumber].M1:=strtofloatDef(gData[4],0);
  RobotState[myNumber].M2:=strtofloatDef(gData[5],0);
  RobotState[myNumber].M3:=strtofloatDef(gData[6],0);
  gData.Free;
end;


initialization
  {$I teste.lrs}

end.

